"""
FastMCP Server with Streamable HTTP Transport Implementation
Latest Protocol as of 2025

This example demonstrates how to create a FastMCP server using the new
Streamable HTTP transport which is the recommended approach for remote
MCP servers.
"""

from fastmcp import FastMCP
from typing import Dict, Any, List
import asyncio
import json

# Initialize FastMCP server
mcp = FastMCP(
    name="demo-server",
    version="1.0.0",
    description="Demo FastMCP server with Streamable HTTP transport"
)

# Sample data store (in production, use a proper database)
data_store = {
    "users": [
        {"id": 1, "name": "Alice", "email": "alice@example.com"},
        {"id": 2, "name": "Bob", "email": "bob@example.com"}
    ],
    "tasks": [
        {"id": 1, "title": "Review code", "completed": False, "user_id": 1},
        {"id": 2, "title": "Deploy app", "completed": True, "user_id": 2}
    ]
}

# Tool definitions using the @mcp.tool decorator
@mcp.tool()
def get_user(user_id: int) -> Dict[str, Any]:
    """Get user information by ID"""
    user = next((u for u in data_store["users"] if u["id"] == user_id), None)
    if user:
        return {"status": "success", "user": user}
    return {"status": "error", "message": "User not found"}

@mcp.tool()
def list_users() -> List[Dict[str, Any]]:
    """List all users"""
    return data_store["users"]

@mcp.tool()
def create_user(name: str, email: str) -> Dict[str, Any]:
    """Create a new user"""
    new_id = max(u["id"] for u in data_store["users"]) + 1
    new_user = {"id": new_id, "name": name, "email": email}
    data_store["users"].append(new_user)
    return {"status": "success", "user": new_user}

@mcp.tool()
def get_tasks(user_id: int = None) -> List[Dict[str, Any]]:
    """Get tasks, optionally filtered by user_id"""
    if user_id:
        return [t for t in data_store["tasks"] if t["user_id"] == user_id]
    return data_store["tasks"]

@mcp.tool()
def create_task(title: str, user_id: int) -> Dict[str, Any]:
    """Create a new task for a user"""
    # Verify user exists
    user = next((u for u in data_store["users"] if u["id"] == user_id), None)
    if not user:
        return {"status": "error", "message": "User not found"}
    
    new_id = max(t["id"] for t in data_store["tasks"]) + 1
    new_task = {"id": new_id, "title": title, "completed": False, "user_id": user_id}
    data_store["tasks"].append(new_task)
    return {"status": "success", "task": new_task}

@mcp.tool()
def update_task(task_id: int, completed: bool = None, title: str = None) -> Dict[str, Any]:
    """Update a task's completion status or title"""
    task = next((t for t in data_store["tasks"] if t["id"] == task_id), None)
    if not task:
        return {"status": "error", "message": "Task not found"}
    
    if completed is not None:
        task["completed"] = completed
    if title is not None:
        task["title"] = title
    
    return {"status": "success", "task": task}

@mcp.tool()
def calculate(expression: str) -> Dict[str, Any]:
    """
    Safely evaluate a mathematical expression
    Supports basic arithmetic operations (+, -, *, /, **, %)
    """
    try:
        # Basic safety check - only allow specific characters
        allowed_chars = set("0123456789+-*/.() %")
        if not all(c in allowed_chars for c in expression.replace(" ", "")):
            return {"status": "error", "message": "Invalid characters in expression"}
        
        # Evaluate the expression
        result = eval(expression)
        return {"status": "success", "result": result, "expression": expression}
    except Exception as e:
        return {"status": "error", "message": f"Error evaluating expression: {str(e)}"}

# Resource definitions using the @mcp.resource decorator
@mcp.resource("user://list")
def user_list_resource() -> str:
    """Resource providing user list as JSON"""
    return json.dumps(data_store["users"], indent=2)

@mcp.resource("task://list")
def task_list_resource() -> str:
    """Resource providing task list as JSON"""
    return json.dumps(data_store["tasks"], indent=2)

@mcp.resource("user://{user_id}")
def user_resource(user_id: int) -> str:
    """Resource providing specific user data"""
    user = next((u for u in data_store["users"] if u["id"] == user_id), None)
    if user:
        return json.dumps(user, indent=2)
    return json.dumps({"error": "User not found"}, indent=2)

# Prompt templates using the @mcp.prompt decorator
@mcp.prompt()
def user_summary_prompt(user_id: int) -> str:
    """Generate a summary prompt for a specific user"""
    user = next((u for u in data_store["users"] if u["id"] == user_id), None)
    if not user:
        return "User not found"
    
    user_tasks = [t for t in data_store["tasks"] if t["user_id"] == user_id]
    completed_tasks = [t for t in user_tasks if t["completed"]]
    
    return f"""
    User Summary for {user['name']}:
    - Email: {user['email']}
    - Total tasks: {len(user_tasks)}
    - Completed tasks: {len(completed_tasks)}
    - Pending tasks: {len(user_tasks) - len(completed_tasks)}
    
    Task details:
    {json.dumps(user_tasks, indent=2)}
    """

@mcp.prompt()
def system_status_prompt() -> str:
    """Generate a system status prompt"""
    return f"""
    System Status:
    - Total users: {len(data_store['users'])}
    - Total tasks: {len(data_store['tasks'])}
    - Completed tasks: {len([t for t in data_store['tasks'] if t['completed']])}
    - Pending tasks: {len([t for t in data_store['tasks'] if not t['completed']])}
    
    Recent activity summary available via tools.
    """

# Custom health check route
@mcp.custom_route("GET", "/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "transport": "streamable-http"}

# Main function to run the server
def main():
    """Run the FastMCP server with Streamable HTTP transport"""
    print("Starting FastMCP server with Streamable HTTP transport...")
    
    # Run with Streamable HTTP transport (recommended for remote servers)
    mcp.run(
        transport="streamable-http",  # or just "http" (alias)
        host="0.0.0.0",              # Listen on all interfaces
        port=8000,                   # Port number
        path="/mcp",                 # MCP endpoint path
        log_level="info"             # Logging level
    )

# Alternative async main function
async def main_async():
    """Run the FastMCP server asynchronously"""
    print("Starting FastMCP server with Streamable HTTP transport (async)...")
    
    await mcp.run_async(
        transport="streamable-http",
        host="0.0.0.0",
        port=8000,
        path="/mcp",
        log_level="info"
    )

# FastAPI integration example
def create_fastapi_app():
    """
    Example of integrating FastMCP with FastAPI for more advanced use cases
    """
    from fastapi import FastAPI
    
    # Create FastAPI app
    app = FastAPI(title="FastMCP + FastAPI Demo")
    
    # Mount the FastMCP server
    app.mount("/mcp-server", mcp.streamable_http_app())
    
    # Add custom FastAPI routes
    @app.get("/")
    async def root():
        return {"message": "FastMCP + FastAPI Integration"}
    
    @app.get("/api/stats")
    async def get_stats():
        return {
            "users": len(data_store["users"]),
            "tasks": len(data_store["tasks"]),
            "completed_tasks": len([t for t in data_store["tasks"] if t["completed"]])
        }
    
    return app

if __name__ == "__main__":
    # Run the server
    main()
    
    # For async context, use:
    # asyncio.run(main_async())
    
    # For FastAPI integration, use:
    # import uvicorn
    # app = create_fastapi_app()
    # uvicorn.run(app, host="0.0.0.0", port=8000)
